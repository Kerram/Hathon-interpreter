def x :: Int = 5;
def f1 :: Int -> Int arg = x + arg;
def f2 :: Int -> Int arg = let def x :: Int = 10 in x * (f1 arg);

f1 1;
f2 1;

def x :: Int = 100;
f1 1;
f2 1;

def f3 :: Int -> [Int] arg = x:(f2 arg):[f1 arg];
f3 1;

# Comments refer to calculation g (-1).
def g :: Int -> Int arg =
/* +     99 */        arg + x + (let def x :: Int = 1000 in
/* +   1000 */          x + (let def g2 :: Int -> Int arg = x + arg in
/* +   2000 */            (g2 x) + (let def x :: Int = 10000 in
                            (let def g3 :: Int -> Int arg = x + arg in
/* +  20000 */                (g3 x) + (let def x :: Int = 100000 in
/* + 101000 */                  g2 x)))));

g (-1);
def x :: Int = -1000;

x;
g (-1);
