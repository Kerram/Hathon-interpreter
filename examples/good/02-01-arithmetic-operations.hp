1 + 2;   # 3
5 * 10;  # 50
4 - 3;   # 1
3 - 4;   # -1
0 - 0;   # 0
4 - 0;   # 4
0 - 4;   # -4
-5;      # -5
10 // 5; # 2
10 // 3; # 3
10 % 2;  # 0
5 % 3;   # 2
-5 % 4;  # 3 = (-5) `mod` 4 in Haskell
-5 % -5; # 0
-5 % -9; # -5 = (-5) `mod` (-9) in Haskell
4 % -3;  # -2 = 4 `mod` (-3) in Haskell
-0;      # 0
-(-5);   # 5
